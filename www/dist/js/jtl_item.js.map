{"version":3,"names":[],"mappings":"","sources":["jtl_item.js"],"sourcesContent":["/*\n * JTL Item v1.1 - http://apex.world/plugins/\n *\n * Licensed under MIT License (MIT)\n * Jorge Rimblas Â© 2017-2020\n*/\n\n$.widget( \"ui.jtlItem\", {\n \n  // Default options.\n  options: {\n     lang: \"en\",\n     lang_codes: [],  // [\"en\",\"fr\",\"es\"]\n     messages: null,\n     itemName: '',\n     fieldSize: 30,\n     fieldRows: 5,\n     fieldMaxLength: 80,\n     dialogTitle: null\n  },\n\n  // Logging for \"regular\" text elements\n  log: function() {\n    var args = Array.prototype.join.call( arguments, ', ' );\n    apex.debug.message(4, \"jtlitem:\", args);\n  },\n  // Enhanced log\n  // accepts 2 objects for logging\n  elog: function(p1,p2) {\n    apex.debug.message(4, \"jtlitem:\", p1, p2);\n  },\n\n  _topApex: apex.util.getTopApex(),\n\n  _initGridConfig: function () {\n    var uiw = this,\n        region = apex.region.findClosest(uiw._item$[0]);\n\n    uiw.log(\"_initGridConfig\");\n    uiw.elog(\"uiw._item$\", uiw._item$);\n    uiw.elog(\"region\", region);\n\n    if (uiw._values.igMode) {\n      // uiw._elements.$grid = region.widget().interactiveGrid(\"getCurrentView\");\n      uiw._elements.$ig = region.widget().interactiveGrid();\n      uiw._elements.$grid = region.widget().interactiveGrid(\"getViews\").grid;\n      uiw.elog(\"_elements.$grid:\", uiw._elements.$grid);\n\n      region.widget().on(\"interactivegridsave\", function() {\n        // Would like to call clearSelection() instead, but can't figure out how.\n        // Turn edit off to force a fresh load of data again.\n        // Yes, this is a total hack, and would love to learn of a better approach\n        uiw._elements.$grid.setEditMode(false);\n      });\n\n    }\n    else {\n      uiw.log(\"not an IG\");\n    }\n\n  },\n\n\n  _resetFocus: function () {\n    var uiw = this;\n\n    uiw.log(\"_resetFocus\");\n\n    if (uiw._values.igMode) {  // are we inside a grid?\n      // find our column in the grid\n      uiw.elog(\"uiw._elements.$grid\", uiw._elements.$grid);\n      uiw.elog(\"uiw._elements.$ig\", uiw._elements.$ig);\n\n      var recordId = uiw._elements.$grid.model.getRecordId(uiw._elements.$grid.view$.grid('getSelectedRecords')[0]);\n      var column = uiw._elements.$ig.interactiveGrid('option').config.columns.filter(function (column) {\n        return column.staticId === uiw.options.itemName;\n      })[0];\n      // go to our cell and focus it      \n      uiw._elements.$grid.view$.grid('gotoCell', recordId, column.name);\n      uiw._elements.$grid.focus();\n    } else {\n      // we are not in a grid, so focus the item that called us\n      uiw._item$.trigger('focus');\n    }\n  },\n\n\n  _createPrivateStorage: function() {\n     var uiw = this;\n\n     uiw._item$ = $('#' + uiw.options.itemName);\n\n     uiw._values = {\n        fieldSize: 30,\n        fieldMaxLength: 80,\n        dataJSON: {},\n        curr_lang_index: 0,\n        languages: {},\n        tagMap: {},\n        messages: JSON.parse(uiw.options.messages),\n        grid: null,\n        totalLanguages: 0,\n        disabled: false,\n        newRecord: false,\n        igMode: uiw.options.igMode\n     };\n\n     uiw._elements = {\n        $window: {},\n        $document: {},\n        $body: {},\n        $itemset: {},\n        $mlsButton: {},\n        $ig: {},\n        $dialog: {},\n        $dialogContent: {},\n        $saveButton: {},\n        $cancelButton: {},\n        $buttonContainer: {}\n     };\n  },\n\n\n\n  _create: function() {\n    var uiw = this,\n        initJSON = {};\n\n    // Options are already merged and stored in this.options (or uiw.options)\n    uiw.log(\"_create\");\n    uiw.log(uiw.options.itemName);\n\n    // helper function for finding the index position of our current displayed language\n    function language_index (j, l) {\n      var i = null,\n          idx = -1;\n      for (i = 0; j.length > i && idx == -1; i += 1) {\n        if (j[i].l === l) {\n          idx = i;\n        }\n      }\n      return idx;\n    }\n\n    uiw._createPrivateStorage();\n    uiw._initElements();\n    uiw._initBaseElements();\n\n\n    try {uiw._values.languages = JSON.parse(uiw.options.lang_codes);}\n    catch (e) {console.error(\"The defined languages are not formatted correctly. See Shared Componets > Components Settings > JTL Item [Plug-in]\", uiw.options.lang_codes);}\n    uiw._values.totalLanguages = uiw._values.languages.length;\n\n    if (!uiw._values.igMode || uiw.element.data(\"value\") ) {\n      // We are an not an IG column (where the value is set via displayValueFor) \n      // or we are an item with an initial value\n      initJSON = uiw.element.data(\"value\");\n    }\n\n    // set the fresh list of languages\n    uiw._initDataJSON(initJSON);\n\n    // Which position language are we using\n    uiw._values.curr_lang_index = language_index(uiw._values.dataJSON, uiw.options.lang);\n    \n    // Sync our JSON data-value attribute with the actual value in the correct language, but\n    // also during page submit to make sure we submit the correct value \n    uiw._item$\n       .bind('change', {uiw: uiw}, uiw._syncJSONdata);\n    uiw._elements.$document\n       .bind('apexbeforepagesubmit', {uiw: uiw}, uiw._syncJSONdata);\n\n    uiw._elements.$mlsButton\n       .bind('click', {uiw: uiw}, uiw._handleOpenClick);\n\n    // Init APEX pageitem functions\n    uiw._initApexItem();\n\n    // apex.jQuery(window).on(\"theme42ready\", function() {\n    apex.jQuery(window).on(\"interactivegridviewmodelcreate\", function(event, ui) { // will this work for multiple IG?\n      // init the grid values, but wait until the grid is ready\n      uiw._initGridConfig();\n    });\n\n  },\n\n\n\n  _initApexItem: function () {\n    var uiw = this;\n\n    uiw.log(\"_initApexItem\", \"Registering with apex.item.create for \" + uiw.options.itemName);\n    // Set and get value via apex functions\n    apex.item.create(uiw.options.itemName, {\n\n       setValue: function(pValue, pDisplayValue) {\n          uiw.log( \"apex.item.setValue\", pValue, pDisplayValue);\n\n          uiw._initDataJSON(JSON.parse(pValue || \"{}\"));\n\n          if (pDisplayValue || !pValue || pValue.length === 0) {\n              // empty pValue\n          } else {\n              // NOT empty pValue\n              if (!pDisplayValue) {\n                pDisplayValue = uiw._getTL(uiw.options.lang);\n              }\n\n              uiw._item$.val(pDisplayValue);\n          }\n\n       },\n       getValue: function() {\n          return JSON.stringify(uiw._values.dataJSON);\n       },\n       setFocus: function() {\n          uiw._item$.trigger(\"focus\");\n       },\n       enable: function() {\n          uiw.enable();\n       },\n       disable: function() {\n          uiw.disable();\n       },\n       displayValueFor: function (pValue) {\n          var jtlJSON = {};\n          // The IG calls this code to set the initial display values\n          uiw.log(\"apex.item.displayValueFor\", pValue);\n          if (pValue) {\n            try { // just protect us if the JSON is invalid\n              jtlJSON = JSON.parse(pValue);\n            }\n            catch (e) {\n            }\n\n\n          }\n          uiw._initDataJSON(jtlJSON);\n          return uiw._getTL(uiw.options.lang);\n       }\n    });\n\n  },\n\n\n  _initElements: function() {\n     var uiw = this;\n\n     uiw._elements.$window = $(window);\n     uiw._elements.$document = $(document);\n     uiw._elements.$body = $(document.body);\n\n  },\n\n\n  _initDialogElements: function() {\n     var uiw = this;\n\n     uiw._elements.$dialogContent = $('div.jtlitem-content');\n     uiw._elements.$saveButton = $('button.jtlitem-save-button');\n     uiw._elements.$cancelButton = $('button.jtlitem-cancel-button');\n\n  },\n\n\n  _initBaseElements: function() {\n     var uiw = this;\n\n     uiw.log( \"_initBaseElements\");\n     uiw.elog( \"element\", uiw.element);\n\n     uiw._values.fieldSize = uiw.options.itemType === \"TEXT\"? uiw._item$.attr(\"size\") : uiw._item$.attr(\"cols\");\n     if (uiw.options.itemType === \"TEXTAREA\") {\n       uiw._values.fieldRows = uiw._item$.attr(\"rows\");\n     }\n     uiw._values.fieldMaxLength = uiw._item$.attr(\"maxlength\");\n\n     // Starting with APEX 18.1 the item set is the itemWrapper class\n     uiw._elements.$itemset = uiw._item$.parent();\n     uiw._elements.$mlsButton = uiw._elements.$itemset.find('button.jtlitem-modal-open');\n  },\n\n\n  _syncLanguageMap: function() {\n     var uiw = this,\n         i = null,\n         tags = {};\n\n     uiw.log( \"_syncLanguageMap\");\n     tags = uiw._values.dataJSON;\n\n     // http://mattsnider.com/how-to-efficiently-search-a-json-array/\n     uiw._values.tagMap = {};\n     for (i = 0; tags.length > i; i += 1) {\n         uiw._values.tagMap[tags[i].l] = tags[i].tl;\n         // console.log(i, \"[\" + tags[i].l + \"] = \", tags[i].tl)\n     }\n      \n  },\n\n\n  // get the language value for a given language code\n  _getTL: function(langCode) {\n     var uiw = this;\n     return uiw._values.tagMap[langCode];\n  },\n\n\n\n  // expects a jtlJSON structure or an empty object\n  _initDataJSON: function(jtlJSON){\n     var uiw = this,\n         jsonData = [],\n         input_data = jtlJSON || {};\n\n         uiw.log(\"_initDataJSON\");\n         uiw.elog({input_data});\n\n     if (apex.jQuery.isEmptyObject(input_data)) {\n        uiw.log(\"Initializing with empty value\");\n\n        // The record is empty so we build a \n        // build JSON with this structure to seed it:\n        //  [ {\"l\": \"us\", \"tl\": \"Project Analysis\"}\n        //  , {\"l\": \"fr\", \"tl\": \"Analyse de projet\"}\n        //  , {\"l\": \"es\", \"tl\": \"Analisis de projecto\"}]\n        uiw._values.languages.forEach(function(l) {\n           jsonData.push({\"l\": l, \"tl\": \"\"});\n        });\n\n        uiw._values.dataJSON = jsonData;\n        uiw._values.newRecord = true;\n     }\n     else {\n       uiw._values.dataJSON = input_data;\n       uiw._values.newRecord = false;\n     }\n\n     uiw._syncLanguageMap();\n\n  },\n\n\n\n  _syncJSONdata: function(eventObj) {\n     // var uiw = eventObj.data.uiw,\n     var uiw,\n         lang_index;\n\n     if (typeof eventObj != \"undefined\") {\n        // we were call from an event\n        uiw = eventObj.data.uiw;\n     }\n     else {\n        // direct call\n        uiw = this;\n     }\n     uiw.log(\"_syncJSONdata\");\n\n     lang_index = uiw._values.curr_lang_index;\n\n     if (uiw._values.newRecord) {\n        // On new record we want to save the new entered value into the ALL the\n        // records in the JSON structure\n        for (var i = uiw._values.totalLanguages - 1; i >= 0; i--) {\n          uiw._values.dataJSON[i].tl = uiw._item$.val();\n        }\n     }\n     else {\n        // save the new text into the JSON structure for the current language\n        uiw._values.dataJSON[lang_index].tl = uiw._item$.val();\n     }\n\n     uiw._syncLanguageMap();\n  },\n\n\n\n  _initDialogButtons: function() {\n     var uiw = this;\n\n     uiw._elements.$cancelButton\n        .bind('click', {uiw: uiw}, uiw._handleCancelButtonClick);\n\n     uiw._elements.$saveButton\n        .bind('click', {uiw: uiw}, uiw._handleSaveButtonClick);\n\n  },\n\n\n  _handleCancelButtonClick: function(eventObj) {\n     var uiw = eventObj.data.uiw;\n\n     // if the dialog opens, we're not a new record any more\n     uiw._values.newRecord = false;\n\n     uiw._elements.$dialog.dialog('close'); // this should cascade to remove the dialog\n\n  },\n\n\n\n  _handleSaveButtonClick: function(eventObj) {\n     var uiw = eventObj.data.uiw,\n         display_value;\n\n     uiw._elements.$dialogContent.find('.jtlitem-value').each(function(i,el){\n        // loop through all dialog elements and store translations\n        // back into the dataJSON structure\n        uiw.log(i + \"(\" + el.dataset.lang + \"):\" + el.value);\n\n        uiw._values.dataJSON[i].l = el.dataset.lang;\n        uiw._values.dataJSON[i].tl = el.value;\n        if (uiw._values.curr_lang_index == i) {\n           display_value = el.value;\n        }\n     });\n\n     uiw._syncLanguageMap();\n\n     // we're done \"saving\" back from the dialog, clear the newRecord flag\n     uiw._values.newRecord = false;\n\n     uiw._item$.val(display_value);\n     uiw._signalChange();\n\n     uiw._elements.$dialog.dialog('close'); // this should cascade to remove the dialog\n  },\n\n\n  _signalChange: function() {\n     var uiw = this;\n\n     // Need to use apex.jQuery for the events to register with the DA framework\n     apex.jQuery(uiw._item$[0]).trigger('change');\n  },\n\n\n  _handleOpenClick: function(eventObj) {\n     var uiw = eventObj.data.uiw;\n\n     uiw.log(\"_handleOpenClick\");\n\n     uiw._syncJSONdata(eventObj);\n     uiw._showDialog();\n  },\n\n\n  _showDialog: function() {\n     var uiw = this,\n         langTable,\n         curr_lang = uiw._values.curr_lang_index,\n         dialogHtml;\n\n     uiw.log(\"_showDialog\");\n\n     langTable = \n           '<table class=\"t-Report-report\" summary=\"Available Translations\">\\n' +\n           ' <tr>\\n' +\n           '  <th class=\"t-Report-colHead\">' + uiw._values.messages.languageLabel + '</th>' +\n           '  <th class=\"t-Report-colHead u-tL\">' + uiw._values.messages.languageValue + '</th>' +\n           ' </tr>\\n';\n           // ' <tr>\\n';\n\n     $.each(uiw._values.languages, function( index, lang ) {\n       langTable +=\n       ' <tr' + (curr_lang==index? ' class=\"selected\"':'') + '>\\n' +\n       '  <td class=\"t-Report-cell t-Form-inputContainer u-tC\">' + apex.util.escapeHTMLAttr(lang) + '</td>' +\n       '  <td class=\"t-Report-cell t-Form-inputContainer u-tL\">';\n       if (uiw.options.itemType === \"TEXT\") {\n         langTable +=\n         '    <input type=\"text\" class=\"text_field apex-item-text jtlitem-value\" data-lang=\"' + lang + '\" value=\"' + apex.util.escapeHTMLAttr(uiw._getTL(lang)) + '\" size=\"' + uiw._values.fieldSize + '\" maxlength=\"' + uiw._values.fieldMaxLength + '\"></td>';\n       }\n       else {\n         langTable +=\n         '    <textarea class=\"textarea apex-item-textarea jtlitem-value\" data-lang=\"' + lang + '\"' +\n              ' cols=\"' + uiw._values.fieldSize + '\" rows=\"' + uiw._values.fieldRows + '\"' + \n              ' maxlength=\"' + uiw._values.fieldMaxLength + '\"' + \n              '>' + apex.util.escapeHTMLAttr(uiw._getTL(lang)) + '</textarea>';\n       }\n\n       langTable +=\n        ' </tr>\\n';\n     });\n     langTable +=\n     '</table>\\n';\n\n      dialogHtml =\n           '<div class=\"jtlitem-dialog\"><div class=\"jtlitem-container ui-widget\">\\n' +\n           '  <div class=\"jtlitem-button-container\">\\n' +\n           '     <button class=\"jtlitem-cancel-button t-Button\">' +\n           '       <span class=\"t-Button-label\">' + uiw._values.messages.cancelButton + '</span>' +\n           // '       <span class=\"ui-icon ui-icon-close\"></span>' + \n           '     </button>\\n' +\n           '     <button class=\"jtlitem-save-button t-Button t-Button--hot\">' + \n           '       <span class=\"t-Button-label\">' + uiw._values.messages.applyChanges + '</span>' +\n           '       <span class=\"t-Icon t-Icon--right fa fa-check\"></span>' + \n           '     </button>\\n' +\n           '  </div>\\n' +\n           '  <div class=\"jtlitem-content\">\\n' +\n              langTable +\n           '  </div>\\n' +\n           '</div></div>\\n';\n\n     uiw._elements.$body.append(dialogHtml);\n\n     // ready a dialog container by creating a div\n     uiw._elements.$dialog = $('div.jtlitem-dialog');\n\n     // open created div as a dialog\n     uiw._elements.$dialog.dialog({\n         closeOnEscape: true,\n         title:         uiw.options.dialogTitle,\n         autoResize:    true,\n         minWidth:      400,\n         minHeight:     250,\n         width:         'auto',\n         height:        'auto',\n         modal:         true,\n         position:      { my: \"left\", at: \"left center\", of: uiw._item$[0] },\n         open: function() {\n            // uiw._topApex.navigation.beginFreezeScroll();\n            uiw._initDialogElements();\n            uiw._initDialogButtons();\n\n            // Focus on the first value of the current language \n            uiw._elements.$dialogContent.find('tr.selected .jtlitem-value').trigger('focus');\n         },\n         close: function() {\n\n            $(this).dialog('destroy');\n            uiw._elements.$dialog.remove();\n            uiw._elements.$document.find('div.jtlitem-dialog').remove();\n            // uiw._topApex.navigation.endFreezeScroll();\n\n            uiw._resetFocus();\n         }\n       })\n       .on('keydown', function(evt) {\n           if (evt.keyCode === $.ui.keyCode.ESCAPE) {\n               uiw._elements.$dialog.dialog('close');\n           }                \n           evt.stopPropagation();\n       });\n\n\n  },\n\n\n  disable: function() {\n     var uiw = this;\n\n     if (uiw._values.disabled === false) {\n        uiw._item$\n           .attr('disabled','disabled');\n\n        uiw._elements.$mlsButton\n           .attr('disabled','disabled')\n           .unbind('click', uiw._handleOpenClick);\n     }\n\n     uiw._values.disabled = true;\n  },\n\n\n  enable: function() {\n     var uiw = this;\n\n     if (uiw._values.disabled === true) {\n       uiw._item$.removeAttr('disabled');\n       uiw._elements.$mlsButton\n          .removeAttr('disabled')\n          .bind('click', {uiw: uiw}, uiw._handleOpenClick);\n\n       uiw._values.disabled = false;\n     }\n  }\n});\n"],"file":"jtl_item.js"}